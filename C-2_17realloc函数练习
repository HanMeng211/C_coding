//情况1：原有空间之后有足够大的空间

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main()
{
	int* p = (int*)malloc(20);
	if (p == NULL)
	{
		printf("%s\n", strerror(errno));
	}
	else
	{
		for (int i = 0; i < 5; i++)
		{
			*(p + i) = i;
		}
	}
	//得用一个新的变量来接受realloc函数的返回值
	//防止开辟失败返回NULL给p找不到之前的空间
	int*ptr = (int*)realloc(p,40);
	if (ptr != NULL)
	{
		p = ptr;
		for (int i = 5; i < 10; i++)
		{
			*(p + i) = i;
		}
		for (int i = 0; i < 10; i++)
		{
			printf("%d ", *(p + i));
		}
	}
	free(p);
	p = NULL;
	return 0;
}







// 情况2：原有空间之后没有足够大的空间


#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main()
{
	int* p = (int*)malloc(20);
	if (p == NULL)
	{
		printf("%s\n", strerror(errno));
	}
	else
	{
		for (int i = 0; i < 5; i++)
		{
			*(p + i) = i;
		}
	}
	//得用一个新的变量来接受realloc函数的返回值
	//防止开辟失败返回NULL给p找不到之前的空间
	int*ptr = (int*)realloc(p,400000);
	if (ptr != NULL)
	{
		p = ptr;
		for (int i = 5; i < 10; i++)
		{
			*(p + i) = i;
		}
		for (int i = 0; i < 10; i++)
		{
			printf("%d ", *(p + i));
		}
	}
	free(p);
	p = NULL;
	return 0;
}
